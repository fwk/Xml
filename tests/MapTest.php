<?php

namespace Fwk\Xml;

/**
 * Test class for XmlFile.
 * Generated by PHPUnit on 2012-07-25 at 22:30:05.
 */
class MapTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Map
     */
    protected $object;
    
    public function testInvalidAddArgument() {
        $this->object = new Map();
        $this->setExpectedException('\InvalidArgumentException');
        $this->object->add(array(new \stdClass()));
    }
    
    public function testRemovePath() {
        $this->object = new Map();
        $path = Path::factory('/test/description', 'description');
        $path2 = Path::factory('/test/properties/property', 'props')
                ->loop(true, '@inexistant');
        
        $this->object->add(array($path, $path2));
        $this->assertEquals(2,  count($this->object->getPaths()));
        $this->object->remove($path);
        $this->assertEquals(1,  count($this->object->getPaths()));
    }
    
    public function testNamedPropertiesWithWrongIdentifier()
    {
        $map = new Map();
        $map->add(Path::factory('/test/properties/property', 'props')
                ->loop(true, '@inexistant'));
        
        $result = $map->execute(new XmlFile(__DIR__ .'/test.xml'));
        
        $this->assertTrue(is_array($result));
        $this->assertArrayHasKey('props', $result);
        $this->assertTrue(is_array($result['props']));
        $this->assertEquals(2, count($result['props']));
        $this->assertFalse(isset($result['props']['test']));
        $this->assertEquals('test_value', $result['props'][0]);
    }
    
    public function testInexistantLoopChildrenPathShouldReturnArray()
    {
        $map = new Map();
        $map->add(Path::factory('/test/properties', 'props')
                ->loop(true)
                ->addChildren(Path::factory('param', 'params')->loop(true)));
        
        $result = $map->execute(new XmlFile(__DIR__ .'/test.xml'));
        
        $this->assertTrue(is_array($result));
        $this->assertArrayHasKey('props', $result);
        $this->assertTrue(is_array($result['props'][0]['params']));
        $this->assertEquals(0, count($result['props'][0]['params']));
    }
    
    public function testWrongPathShouldReturnDefaultValue()
    {
        $map = new Map();
        $map->add(Path::factory('/test/inexistant', 'inexist', 'default'));
        
        $result = $map->execute(new XmlFile(__DIR__ .'/test.xml'));
        
        $this->assertTrue(is_array($result));
        $this->assertTrue(is_string($result['inexist']));
        $this->assertEquals('default', $result['inexist']);
    }
    
    public function testWrongPath()
    {
        $map = new Map();
        $map->add(Path::factory('/test', 'test')->addChildren(Path::factory('wrong>path', 'wrong', 'defaultFalse')));
        
        $result = $map->execute(new XmlFile(__DIR__ .'/test.xml'));
        
        $this->assertTrue(is_array($result));
        $this->assertArrayHasKey('test', $result);
        $this->assertTrue(is_array($result['test']));
        $this->assertArrayHasKey('wrong', $result['test']);
        $this->assertEquals('defaultFalse', $result['test']['wrong']);
    }
}
